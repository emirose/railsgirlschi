.page-header
  %h2
    RG! Answers - Part 1
  %p RG Answers (Rails Girls Answers) is the newest competitor to Yahoo! Answers.  It allows users to pose a question.  Under each question, users can give answers and vote on the best ones.
%h3 User should be able to...
%h3 Feature 1.0 - Verify versions
:ruby
   code = <<-HEREDOC
   ruby -v
   rails -v
   HEREDOC
= tutorial_for("plain", "Check that ruby = 2.1.2 and rails = 4.2.1", code)
.alert.alert-success Consider using http://nitrous.io if your ruby version is below 2.1.2, for rails version run "gem install rails --version=4.2.1".

%h3 Feature 1.1 - View a list of Questions
:ruby
  code = <<-HEREDOC
  rails new rg_answers --skip-test-unit
  cd rg_answers
  rails generate resource Question name:string reason:string
  rake db:migrate
  rails server
  HEREDOC
= tutorial_for("plain", "Create a new Rails Project", code)
.alert.alert-success Coaches, give quick explaination about what each command does.

:ruby
  code = <<-HEREDOC
    Rails.application.routes.draw  do

      resources :questions

      root :to => 'questions#index'

      # The priority is based upon order of creation:
      # first created -> highest priority.
      ...
  HEREDOC
= tutorial_for("ruby", "Open <code>config/routes.rb</code>: Create a route to the index page", code, [5])


:ruby
  code = <<-HEREDOC
    class QuestionsController < ApplicationController
      def index
       @questions = Question.all
      end
    end
    HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/questions_controller.rb</code>: Create an index action in the QuestionsController", code, [2, 3, 4])

:ruby
  code = <<-HEREDOC
  <h2>RG! Questions</h2>

  <% @questions.each do |single_question| %>
    <strong><%= single_question.name %></strong><br />
    <%= single_question.reason %><br />
    <hr>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/questions/index.html.erb</code>: Create an index view", code, [*1..7])

= action_for("Restart the Rails Server", "Since we modified the routes, we have to restart the server.")
= action_for("Visit <code>http://localhost:3000</code>", "Try visiting the page again.  It should only have the text 'RG! Questions' but no questions because haven't created any yet.")

:ruby
  code = <<-HEREDOC
  rails console
  q = Question.new
  q.name = "What's the object-oriented way of becoming wealthy?"
  q.reason = "Hi all, I need some ideas for earning money. Got any tips anyone?"
  q.save
  exit
  HEREDOC
= tutorial_for("plain","Create some Questions", code)

= action_for("Visit <code>http://localhost:3000</code>", "You should now see your newly created Question.  If you don't, please ask your coach for some help.")

%h3 Feature 1.2 - Create Questions using a form on the site

:ruby
  code = <<-HEREDOC
  class QuestionsController < ApplicationController
    def index
     @questions = Question.all
    end

    def new
      @question = Question.new
    end

    def create
      @question = Question.new(params.require(:question).permit(:name, :reason))
      if @question.save
        redirect_to questions_url
      else
        render action: "new"
      end
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/questions_controller.rb</code>, add the <strong>new</strong> and <strong>create</strong> actions in the controller.", code, [*5..17])

:ruby
  code = <<-HEREDOC
  <h2>Ask a Question</h2>
  <%= form_for @question do |form| %>
    <div>
      <%= form.label :name, "What is your question?" %><br />
      <%= form.text_field :name %>
    </div>
    <div>
      <%= form.label :reason, "Explain to users why you're asking this." %><br />
      <%= form.text_field :reason %>
    </div>
    <p><%= form.submit %></p>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/questions/new.html.erb</code>, create a form for users to create a new Question", code, [*1..12])

= action_for("Visit <code>http://localhost:3000/questions/new</code>", "This is the new form you just created!  Try creating a few Questions from this web form.")

%h3 Feature 1.3 - Edit Questions from a form

:ruby
  code = <<-HEREDOC
  class QuestionsController < ApplicationController
    def index
     @questions = Question.all
    end

    def new
      @question = Question.new
    end

    def create
      @question = Question.new(params[:question])
      if @question.save
        redirect_to questions_url
      else
        render action: "new"
      end
    end

    def edit
      @question = Question.find(params[:id])
    end

    def update
      @question = Question.find(params[:id])

      if @question.update_attributes(params[:question])
        redirect_to questions_path
      else
        render action: "edit"
      end
    end
  end
  HEREDOC
= tutorial_for("ruby","Create <code>app/controllers/questions_controller.rb</code>, add an <strong>edit</strong> and <strong>update</strong> action.", code, [*18..31])

:ruby
  code = <<-HEREDOC
  <h2>Edit <%= @question.name %></h2>

  <%= form_for @question do |form| %>
    <div>
      <%= form.label :name %><br />
      <%= form.text_field :name %>
    </div>

    <div>
      <%= form.label :reason %><br />
      <%= form.text_field :reason %>
    </div>

    <p><%= form.submit %></p>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/questions/edit.html.erb</code>, write html/erb for a form to edit a Question", code, [*1..15])


:ruby
  code = <<-HEREDOC
  <h2>RG! Questions</h2>

  <% @questions.each do |single_question| %>
    <strong><%= single_question.name %></strong><br />
    <%= single_question.reason %><br />
    <%= link_to "Edit", edit_question_path(single_question) %>
    <hr>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/questions/index.html.erb</code>, On the Index page add a link to the Edit page for a Question inside the @questions.each block", code, [6])

= action_for("Visit <code>http://localhost:3000</code>", "Click on the Edit link for a Question.  You should be able to update your question.  If you can't, please ask your coach for some help.")

%h3 Feature 1.4 - View each Question separately on its own page

:ruby
  code = <<-HEREDOC
  class QuestionsController < ApplicationController
    def index
     @questions = Question.all
    end

    def new
      @question = Question.new
    end

    def create
      @question = Question.new(params[:question])
      if @question.save
        redirect_to questions_url
      else
        render action: "new"
      end
    end

    def edit
      @question = Question.find(params[:id])
    end

    def update
      @question = Question.find(params[:id])

      if @question.update_attributes(params[:question])
        redirect_to questions_path
      else
        render action: "edit"
      end
    end

    def show
      @question = Question.find(params[:id])
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/questions_controller.rb</code>, add a show action.", code, [*32..35])

:ruby
  code = <<-HEREDOC
  <h2><%= @question.name %></h2>
  <p><%= @question.reason %></p>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/questions/show.html.erb</code>, write html/erb code to show Question information.", code, [*1..2])

:ruby
  code = <<-HEREDOC
  <h2>RG! Questions</h2>

  <% @questions.each do |single_question| %>
    <strong><%= link_to single_question.name, question_path(single_question) %></strong><br />
    <%= single_question.reason %><br />
    <%= link_to "Edit", edit_question_path(single_question) %>
    <hr>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/questions/index.html.erb</code>, change each Question name into a link to its show page.", code, [4])

= action_for("Visit <code>http://localhost:3000</code>", "Click on the name of an individual Question.  You should be able to see a page of just that Question.")

%h3 Feature 1.5 - Delete Questions

:ruby
  code = <<-HEREDOC
  class QuestionsController < ApplicationController
    def index
     @questions = Question.all
    end

    def new
      @question = Question.new
    end

    def create
      @question = Question.new(params[:question])
      if @question.save
        redirect_to questions_url
      else
        render action: "new"
      end
    end

    def edit
      @question = Question.find(params[:id])
    end

    def update
      @question = Question.find(params[:id])

      if @question.update_attributes(params[:question])
        redirect_to questions_path
      else
        render action: "edit"
      end
    end

    def show
      @question = Question.find(params[:id])
    end

    def destroy
      @question = Question.find(params[:id])
      @question.destroy
      redirect_to questions_url
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/questions_controller.rb</code>, add a destroy action.", code, [*36..41])

:ruby
  code = <<-HEREDOC
  <h2>RG! Questions</h2>

  <% @questions.each do |single_question| %>
    <strong><%= link_to single_question.name, question_path(single_question) %></strong><br />
    <%= single_question.reason %><br />
    <%= link_to "Edit", edit_question_path(single_question) %>
    <%= link_to 'Destroy', single_question, method: :delete, data: { confirm: 'Are you sure?' } %><br />
    <hr>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/questions/index.html.erb</code>, add a link to the Destroy action for each question", code, [7])



.alert.alert-success 
  Coaches, if there is time left over in this session, try some of the following:
  %ul
    %ol Add Flash messages for actions, such as un/successfully adding, updating, deleting, etc (<a href="http://guides.rubyonrails.org/action_controller_overview.html#the-flash" target="new">Flash Messages</a>).
    %ol Add model validations (<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#validation-helpers" target="new">Validation Helpers</a>).
    %ol Extract the forms into a partial (<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials" target="new">Using Partials</a>)
